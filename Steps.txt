CGPA Calculator – Step-by-Step Checklist
1. Set Up Project Structure

 Create a folder: CGPACalculator

 Inside the folder, create these four files:

input.h / input.cpp

calculate.h / calculate.cpp

output.h / output.cpp

main.cpp

2. Design Data Structures

 Create a Course struct in input.h:

Fields: name, credits, gradePoint

 Use std::vector<Course> for storing multiple courses.

3. Implement Input Module

 input.h: Declare std::vector<Course> getCourses();

 input.cpp: Implement getCourses() to:

Ask user for number of courses.

Loop to input: Course name, Credits, Grade point.

Return a vector<Course>.

 Add basic input validation:

Credits > 0

Grade point within valid range (e.g., 0–10)

4. Implement Calculation Module

 calculate.h: Declare double calculateGPA(const std::vector<Course>& courses);

 calculate.cpp: Implement:

Loop over courses: totalPoints += gradePoint * credits

Sum totalCredits

GPA = totalPoints / totalCredits (handle division by zero)

5. Implement Output Module

 output.h: Declare void displayResults(const std::vector<Course>& courses, double gpa);

 output.cpp: Implement:

Print table headers: Name | Credits | Grade Point

Loop over courses to print details

Print Semester GPA at the end

Use std::setw for aligned columns in terminal

6. Implement Main Module

 main.cpp: Include all three modules

 Call functions in sequence:

getCourses() → store in courses

calculateGPA(courses) → store in gpa

displayResults(courses, gpa)

7. Compile and Run

 Open terminal / cmd in project folder

 Compile all files together:

g++ main.cpp input.cpp calculate.cpp output.cpp -o CGPACalculator


 Run program:

./CGPACalculator   # Linux / Mac
CGPACalculator.exe # Windows


 Test with different inputs, including edge cases:

No courses

Invalid grade points

Large numbers of courses

8. Optional Enhancements for Extra Marks

 Multiple semesters → store vector<vector<Course>>

 Calculate cumulative CGPA over multiple semesters

 Automatically map letter grades to grade points

 Save results to a file (results.txt)

9. Documentation & Report

 Write a short README or report:

Purpose of the program

How to run it

Sample inputs/outputs

Any assumptions (e.g., 0–10 scale, credits must be positive)

10. Final Testing

 Check for crashes / segmentation faults

 Verify calculations are correct

 Ensure clean, aligned terminal output

 Make sure all modules are separate and compile together
